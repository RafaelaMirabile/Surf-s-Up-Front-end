{"ast":null,"code":"var _jsxFileName = \"/home/rafus/Documents/Surfs-Up-Front-end/src/pagesComponents/homePageComponents/Forecast.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport ForcastContext from \"../../contexts/forcastContext.js\";\nimport { getForecast } from \"../../services/API.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Forecast(_ref) {\n  _s();\n  let {\n    latitude,\n    longitude,\n    selectedPointName,\n    forcastHash\n  } = _ref;\n  const [forecast, setForecast] = useState([]);\n  let forecastByHour;\n  console.log(forcastHash[selectedPointName]);\n  if (forcastHash[selectedPointName] !== undefined) {\n    console.log(forcastHash[selectedPointName]);\n    forecastByHour = forcastHash[selectedPointName];\n  } else {\n    /*const body = {\n        longitude: longitude,\n        latitude: latitude\n    }\n    getForecast(body).then((response) => {\n        setForecast(response.data.hours);\n    }).catch((error) => {\n        console.log(error);\n    });\n    \n    forecastByHour = forecast.filter((forecast, index) => index === 6 || index === 9 || index === 15 || index === 18);*/\n    forcastHash[selectedPointName] = \"a\";\n  }\n\n  /* for(let i=0; i< pointList.length; i++){\n        console.log(pointList[i].name)\n        if(pointList[i].name !== forcastHash[pointList[i].name]){\n            const body = {\n                longitude: longitude,\n                latitude: latitude\n            }\n            getForecast(body).then((response) => {\n                setForecast(response.data.hours);\n            }).catch((error) => {\n                console.log(error);\n            });\n            forecastByHour = forecast.filter((forecast, index) => index === 6 || index === 9 || index === 15 || index === 18);\n            forcastHash[pointList[i].name] = forecastByHour;\n           } else {\n            forecastByHour = forcastHash[pointList[i].name];\n        }\n    }*/\n\n  /* useEffect(() => {\n        const body = {\n            longitude: longitude,\n            latitude: latitude\n        }\n        getForecast(body).then((response) => {\n            setForecast(response.data.hours);\n        }).catch((error) => {\n            console.log(error);\n        });\n   }, [])\n       /* const forecastByHour = forecast.filter((forecast, index) => index === 6 || index === 9 || index === 15 || index === 18);\n     console.log(forecastByHour);\n     const arrWithForcast = {selectedPointName : [forecastByHour]}\n     console.log(arrWithForcast);*/\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: \"ALA\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n_s(Forecast, \"i0vJjp72roB6ll5FdJwThp2a2Ns=\");\n_c = Forecast;\nconst Wrapper = styled.div`\nborder: 2px solid orange;\n`;\n_c2 = Wrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"Forecast\");\n$RefreshReg$(_c2, \"Wrapper\");","map":{"version":3,"names":["useContext","useEffect","useState","styled","ForcastContext","getForecast","Forecast","latitude","longitude","selectedPointName","forcastHash","forecast","setForecast","forecastByHour","console","log","undefined","Wrapper","div"],"sources":["/home/rafus/Documents/Surfs-Up-Front-end/src/pagesComponents/homePageComponents/Forecast.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\"\nimport styled from \"styled-components\";\nimport ForcastContext from \"../../contexts/forcastContext.js\";\nimport { getForecast } from \"../../services/API.js\";\n\nexport default function Forecast({ latitude, longitude, selectedPointName, forcastHash }) {\n\n    const [forecast, setForecast] = useState([]);\n    let forecastByHour;\n\n    \n    console.log(forcastHash[selectedPointName]);\n\n        if (forcastHash[selectedPointName] !== undefined) {\n            console.log(forcastHash[selectedPointName]);\n            forecastByHour = forcastHash[selectedPointName];\n        }\n        \n        else {\n            /*const body = {\n                longitude: longitude,\n                latitude: latitude\n            }\n            getForecast(body).then((response) => {\n                setForecast(response.data.hours);\n            }).catch((error) => {\n                console.log(error);\n            });\n            \n            forecastByHour = forecast.filter((forecast, index) => index === 6 || index === 9 || index === 15 || index === 18);*/\n            forcastHash[selectedPointName] = \"a\"\n        }\n\n\n    /* for(let i=0; i< pointList.length; i++){\n          console.log(pointList[i].name)\n          if(pointList[i].name !== forcastHash[pointList[i].name]){\n              const body = {\n                  longitude: longitude,\n                  latitude: latitude\n              }\n              getForecast(body).then((response) => {\n                  setForecast(response.data.hours);\n              }).catch((error) => {\n                  console.log(error);\n              });\n              forecastByHour = forecast.filter((forecast, index) => index === 6 || index === 9 || index === 15 || index === 18);\n              forcastHash[pointList[i].name] = forecastByHour;\n  \n          } else {\n              forecastByHour = forcastHash[pointList[i].name];\n          }\n      }*/\n\n\n    /* useEffect(() => {\n          const body = {\n              longitude: longitude,\n              latitude: latitude\n          }\n          getForecast(body).then((response) => {\n              setForecast(response.data.hours);\n          }).catch((error) => {\n              console.log(error);\n          });\n     }, [])\n  \n      /* const forecastByHour = forecast.filter((forecast, index) => index === 6 || index === 9 || index === 15 || index === 18);\n       console.log(forecastByHour);\n       const arrWithForcast = {selectedPointName : [forecastByHour]}\n       console.log(arrWithForcast);*/\n\n    return (\n        <Wrapper>\n            ALA\n        </Wrapper>\n    )\n\n}\n\nconst Wrapper = styled.div`\nborder: 2px solid orange;\n`\n"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,cAAc,MAAM,kCAAkC;AAC7D,SAASC,WAAW,QAAQ,uBAAuB;AAAC;AAEpD,eAAe,SAASC,QAAQ,OAA0D;EAAA;EAAA,IAAzD;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,iBAAiB;IAAEC;EAAY,CAAC;EAEpF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,IAAIW,cAAc;EAGlBC,OAAO,CAACC,GAAG,CAACL,WAAW,CAACD,iBAAiB,CAAC,CAAC;EAEvC,IAAIC,WAAW,CAACD,iBAAiB,CAAC,KAAKO,SAAS,EAAE;IAC9CF,OAAO,CAACC,GAAG,CAACL,WAAW,CAACD,iBAAiB,CAAC,CAAC;IAC3CI,cAAc,GAAGH,WAAW,CAACD,iBAAiB,CAAC;EACnD,CAAC,MAEI;IACD;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACYC,WAAW,CAACD,iBAAiB,CAAC,GAAG,GAAG;EACxC;;EAGJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAII;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGI,oBACI,QAAC,OAAO;IAAA,UAAC;EAET;IAAA;IAAA;IAAA;EAAA,QAAU;AAGlB;AAAC,GAzEuBH,QAAQ;AAAA,KAARA,QAAQ;AA2EhC,MAAMW,OAAO,GAAGd,MAAM,CAACe,GAAI;AAC3B;AACA,CAAC;AAAA,MAFKD,OAAO;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}