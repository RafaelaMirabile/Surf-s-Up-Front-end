{"ast":null,"code":"var _jsxFileName = \"/home/rafus/Documents/Surfs-Up-Front-end/src/pagesComponents/homePageComponents/Forecast.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport ForcastContext from \"../../contexts/forcastContext.js\";\nimport { getForecast } from \"../../services/API.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Forecast(_ref) {\n  _s();\n  let {\n    latitude,\n    longitude,\n    pointList,\n    selectedPointName\n  } = _ref;\n  const [forecast, setForecast] = useState([]);\n  let forecastByHour;\n  let forcastHash = {};\n  console.log(pointList);\n  useEffect(() => {\n    let nameInHash = forcastHash.contsainsKey(selectedPointName);\n    if (!nameInHash) {}\n  }, []);\n\n  /* for(let i=0; i< pointList.length; i++){\n        console.log(pointList[i].name)\n        if(pointList[i].name !== forcastHash[pointList[i].name]){\n            const body = {\n                longitude: longitude,\n                latitude: latitude\n            }\n            getForecast(body).then((response) => {\n                setForecast(response.data.hours);\n            }).catch((error) => {\n                console.log(error);\n            });\n            forecastByHour = forecast.filter((forecast, index) => index === 6 || index === 9 || index === 15 || index === 18);\n            forcastHash[pointList[i].name] = forecastByHour;\n         } else {\n            forecastByHour = forcastHash[pointList[i].name];\n        }\n    }*/\n\n  console.log(forecastByHour);\n  useEffect(() => {\n    const body = {\n      longitude: longitude,\n      latitude: latitude\n    };\n    getForecast(body).then(response => {\n      setForecast(response.data.hours);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n\n  /* const forecastByHour = forecast.filter((forecast, index) => index === 6 || index === 9 || index === 15 || index === 18);\n   console.log(forecastByHour);\n   const arrWithForcast = {selectedPointName : [forecastByHour]}\n   console.log(arrWithForcast);*/\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: \"ALA\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(Forecast, \"+PwIvJxaxQmA0zne5pUUm5mskXo=\");\n_c = Forecast;\nconst Wrapper = styled.div`\nborder: 2px solid orange;\n`;\n_c2 = Wrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"Forecast\");\n$RefreshReg$(_c2, \"Wrapper\");","map":{"version":3,"names":["useContext","useEffect","useState","styled","ForcastContext","getForecast","Forecast","latitude","longitude","pointList","selectedPointName","forecast","setForecast","forecastByHour","forcastHash","console","log","nameInHash","contsainsKey","body","then","response","data","hours","catch","error","Wrapper","div"],"sources":["/home/rafus/Documents/Surfs-Up-Front-end/src/pagesComponents/homePageComponents/Forecast.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\"\nimport styled from \"styled-components\";\nimport ForcastContext from \"../../contexts/forcastContext.js\";\nimport { getForecast } from \"../../services/API.js\";\n\nexport default function Forecast({ latitude, longitude, pointList, selectedPointName }) {\n\n    const [forecast, setForecast] = useState([]);\n    let forecastByHour;\n    let forcastHash = {}\n    console.log(pointList);\n\n    useEffect( ()=>{\n        let nameInHash = forcastHash.contsainsKey(selectedPointName);\n\n        if(!nameInHash ){\n\n        }\n\n    },[])\n\n\n\n  /* for(let i=0; i< pointList.length; i++){\n        console.log(pointList[i].name)\n        if(pointList[i].name !== forcastHash[pointList[i].name]){\n            const body = {\n                longitude: longitude,\n                latitude: latitude\n            }\n            getForecast(body).then((response) => {\n                setForecast(response.data.hours);\n            }).catch((error) => {\n                console.log(error);\n            });\n            forecastByHour = forecast.filter((forecast, index) => index === 6 || index === 9 || index === 15 || index === 18);\n            forcastHash[pointList[i].name] = forecastByHour;\n\n        } else {\n            forecastByHour = forcastHash[pointList[i].name];\n        }\n    }*/\n\n    console.log(forecastByHour);\n\n   useEffect(() => {\n        const body = {\n            longitude: longitude,\n            latitude: latitude\n        }\n        getForecast(body).then((response) => {\n            setForecast(response.data.hours);\n        }).catch((error) => {\n            console.log(error);\n        });\n   }, [])\n\n    /* const forecastByHour = forecast.filter((forecast, index) => index === 6 || index === 9 || index === 15 || index === 18);\n     console.log(forecastByHour);\n     const arrWithForcast = {selectedPointName : [forecastByHour]}\n     console.log(arrWithForcast);*/\n\n    return (\n        <Wrapper>\n            ALA\n        </Wrapper>\n    )\n\n}\n\nconst Wrapper = styled.div`\nborder: 2px solid orange;\n`\n"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,cAAc,MAAM,kCAAkC;AAC7D,SAASC,WAAW,QAAQ,uBAAuB;AAAC;AAEpD,eAAe,SAASC,QAAQ,OAAwD;EAAA;EAAA,IAAvD;IAAEC,QAAQ;IAAEC,SAAS;IAAEC,SAAS;IAAEC;EAAkB,CAAC;EAElF,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,IAAIW,cAAc;EAClB,IAAIC,WAAW,GAAG,CAAC,CAAC;EACpBC,OAAO,CAACC,GAAG,CAACP,SAAS,CAAC;EAEtBR,SAAS,CAAE,MAAI;IACX,IAAIgB,UAAU,GAAGH,WAAW,CAACI,YAAY,CAACR,iBAAiB,CAAC;IAE5D,IAAG,CAACO,UAAU,EAAE,CAEhB;EAEJ,CAAC,EAAC,EAAE,CAAC;;EAIP;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGIF,OAAO,CAACC,GAAG,CAACH,cAAc,CAAC;EAE5BZ,SAAS,CAAC,MAAM;IACX,MAAMkB,IAAI,GAAG;MACTX,SAAS,EAAEA,SAAS;MACpBD,QAAQ,EAAEA;IACd,CAAC;IACDF,WAAW,CAACc,IAAI,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAK;MACjCT,WAAW,CAACS,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC;IACpC,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;MAChBV,OAAO,CAACC,GAAG,CAACS,KAAK,CAAC;IACtB,CAAC,CAAC;EACP,CAAC,EAAE,EAAE,CAAC;;EAEL;AACJ;AACA;AACA;;EAEI,oBACI,QAAC,OAAO;IAAA,UAAC;EAET;IAAA;IAAA;IAAA;EAAA,QAAU;AAGlB;AAAC,GA/DuBnB,QAAQ;AAAA,KAARA,QAAQ;AAiEhC,MAAMoB,OAAO,GAAGvB,MAAM,CAACwB,GAAI;AAC3B;AACA,CAAC;AAAA,MAFKD,OAAO;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}