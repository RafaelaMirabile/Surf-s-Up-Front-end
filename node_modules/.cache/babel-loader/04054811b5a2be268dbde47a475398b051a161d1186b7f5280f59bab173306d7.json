{"ast":null,"code":"import axios from \"axios\";\nconst URL_BASE = process.env.URL_BASE;\nconsole.log(process.env.URL_BASE);\nfunction createHeader() {\n  const user = JSON.parse(localStorage.getItem(\"surfsup\"));\n  const config = {\n    headers: {\n      Authorization: `Bearer ${user.token}`\n    }\n  };\n  return config;\n}\nasync function getPoints() {\n  const points = `${URL_BASE}`;\n  return await axios.get(points);\n}\n;\nasync function getForecast(body) {\n  const params = 'waveHeight,airTemperature,currentDirection,windDirection,swellPeriod,windSpeed';\n  return await axios.get(`https://api.stormglass.io/v2/weather/point?lat=${body.latitude}&lng=${body.longitude}&params=${params}`, {\n    headers: {\n      'Authorization': 'f5f848e0-96d0-11ed-a138-0242ac130002-f5f84994-96d0-11ed-a138-0242ac130002'\n    }\n  });\n}\nasync function postSignIn(body) {\n  console.log(body);\n  const signIn = `${URL_BASE}/signIn`;\n  return await axios.post(signIn, body);\n}\n;\nasync function postSignUp(body) {\n  const signUp = `${URL_BASE}/signUp`;\n  return await axios.post(signUp, body);\n}\n;\nasync function getReports(pointId) {\n  const reports = `${URL_BASE}/${pointId}`;\n  return await axios.get(reports);\n}\nasync function postReport(pointId, body) {\n  const report = `${URL_BASE}/${pointId}`;\n  return await axios.post(report, body, createHeader());\n}\nasync function deleteReport(reportId) {\n  const report = `${URL_BASE}/${reportId}`;\n  return await axios.delete(report, createHeader());\n}\nasync function favRequest(pointId) {\n  const fav = `${URL_BASE}/${pointId}`;\n  return await axios.post(fav, createHeader());\n}\nexport { getPoints, getForecast, getReports, postSignIn, postSignUp, postReport, deleteReport, favRequest };","map":{"version":3,"names":["axios","URL_BASE","process","env","console","log","createHeader","user","JSON","parse","localStorage","getItem","config","headers","Authorization","token","getPoints","points","get","getForecast","body","params","latitude","longitude","postSignIn","signIn","post","postSignUp","signUp","getReports","pointId","reports","postReport","report","deleteReport","reportId","delete","favRequest","fav"],"sources":["/home/rafus/Documents/Surfs-Up-Front-end/src/services/API.js"],"sourcesContent":["import axios from \"axios\";\n\nconst URL_BASE = process.env.URL_BASE;\nconsole.log(process.env.URL_BASE);\n\nfunction createHeader() {\n    const user = JSON.parse(localStorage.getItem(\"surfsup\"));\n    const config = {\n        headers: {\n            Authorization: `Bearer ${user.token}`\n        },\n    };\n    return config;\n}\n\nasync function getPoints() {\n    const points = `${URL_BASE}`;\n    return await axios.get(points);\n};\n\nasync function getForecast(body) {\n    const params = 'waveHeight,airTemperature,currentDirection,windDirection,swellPeriod,windSpeed'\n    return await axios.get(`https://api.stormglass.io/v2/weather/point?lat=${body.latitude}&lng=${body.longitude}&params=${params}`, {\n        headers: {\n            'Authorization': 'f5f848e0-96d0-11ed-a138-0242ac130002-f5f84994-96d0-11ed-a138-0242ac130002'\n        }\n    });\n}\n\nasync function postSignIn(body) {\n    console.log(body);\n    const signIn = `${URL_BASE}/signIn`;\n    return await axios.post(signIn, body);\n};\n\nasync function postSignUp(body) {\n    const signUp = `${URL_BASE}/signUp`;\n    return await axios.post(signUp, body);\n};\n\nasync function getReports(pointId) {\n    const reports = `${URL_BASE}/${pointId}`\n    return await axios.get(reports);\n}\n\nasync function postReport(pointId, body) {\n    const report = `${URL_BASE}/${pointId}`;\n    return await axios.post(report, body, createHeader());\n}\n\nasync function deleteReport(reportId) {\n    const report = `${URL_BASE}/${reportId}`;\n    return await axios.delete(report, createHeader());\n}\n\nasync function favRequest(pointId){\n    const fav = `${URL_BASE}/${pointId}`;\n    return await axios.post(fav, createHeader());\n}\nexport {\n    getPoints,\n    getForecast,\n    getReports,\n    postSignIn,\n    postSignUp,\n    postReport,\n    deleteReport,\n    favRequest\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACF,QAAQ;AACrCG,OAAO,CAACC,GAAG,CAACH,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;AAEjC,SAASK,YAAY,GAAG;EACpB,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CAAC;EACxD,MAAMC,MAAM,GAAG;IACXC,OAAO,EAAE;MACLC,aAAa,EAAG,UAASP,IAAI,CAACQ,KAAM;IACxC;EACJ,CAAC;EACD,OAAOH,MAAM;AACjB;AAEA,eAAeI,SAAS,GAAG;EACvB,MAAMC,MAAM,GAAI,GAAEhB,QAAS,EAAC;EAC5B,OAAO,MAAMD,KAAK,CAACkB,GAAG,CAACD,MAAM,CAAC;AAClC;AAAC;AAED,eAAeE,WAAW,CAACC,IAAI,EAAE;EAC7B,MAAMC,MAAM,GAAG,gFAAgF;EAC/F,OAAO,MAAMrB,KAAK,CAACkB,GAAG,CAAE,kDAAiDE,IAAI,CAACE,QAAS,QAAOF,IAAI,CAACG,SAAU,WAAUF,MAAO,EAAC,EAAE;IAC7HR,OAAO,EAAE;MACL,eAAe,EAAE;IACrB;EACJ,CAAC,CAAC;AACN;AAEA,eAAeW,UAAU,CAACJ,IAAI,EAAE;EAC5BhB,OAAO,CAACC,GAAG,CAACe,IAAI,CAAC;EACjB,MAAMK,MAAM,GAAI,GAAExB,QAAS,SAAQ;EACnC,OAAO,MAAMD,KAAK,CAAC0B,IAAI,CAACD,MAAM,EAAEL,IAAI,CAAC;AACzC;AAAC;AAED,eAAeO,UAAU,CAACP,IAAI,EAAE;EAC5B,MAAMQ,MAAM,GAAI,GAAE3B,QAAS,SAAQ;EACnC,OAAO,MAAMD,KAAK,CAAC0B,IAAI,CAACE,MAAM,EAAER,IAAI,CAAC;AACzC;AAAC;AAED,eAAeS,UAAU,CAACC,OAAO,EAAE;EAC/B,MAAMC,OAAO,GAAI,GAAE9B,QAAS,IAAG6B,OAAQ,EAAC;EACxC,OAAO,MAAM9B,KAAK,CAACkB,GAAG,CAACa,OAAO,CAAC;AACnC;AAEA,eAAeC,UAAU,CAACF,OAAO,EAAEV,IAAI,EAAE;EACrC,MAAMa,MAAM,GAAI,GAAEhC,QAAS,IAAG6B,OAAQ,EAAC;EACvC,OAAO,MAAM9B,KAAK,CAAC0B,IAAI,CAACO,MAAM,EAAEb,IAAI,EAAEd,YAAY,EAAE,CAAC;AACzD;AAEA,eAAe4B,YAAY,CAACC,QAAQ,EAAE;EAClC,MAAMF,MAAM,GAAI,GAAEhC,QAAS,IAAGkC,QAAS,EAAC;EACxC,OAAO,MAAMnC,KAAK,CAACoC,MAAM,CAACH,MAAM,EAAE3B,YAAY,EAAE,CAAC;AACrD;AAEA,eAAe+B,UAAU,CAACP,OAAO,EAAC;EAC9B,MAAMQ,GAAG,GAAI,GAAErC,QAAS,IAAG6B,OAAQ,EAAC;EACpC,OAAO,MAAM9B,KAAK,CAAC0B,IAAI,CAACY,GAAG,EAAEhC,YAAY,EAAE,CAAC;AAChD;AACA,SACIU,SAAS,EACTG,WAAW,EACXU,UAAU,EACVL,UAAU,EACVG,UAAU,EACVK,UAAU,EACVE,YAAY,EACZG,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}