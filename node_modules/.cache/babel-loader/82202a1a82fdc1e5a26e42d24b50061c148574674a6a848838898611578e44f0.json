{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { getForecast } from \"../../services/API.js\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Forecast(_ref) {\n  _s();\n  let {\n    latitude,\n    longitude,\n    selectedPointName\n  } = _ref;\n  const [forecast, setForecast] = useState([]);\n  useEffect(() => {\n    const body = {\n      longitude: longitude,\n      latitude: latitude\n    };\n    /*getForecast(body).then((response) => {\n        setForecast(response.data.hours);\n    }).catch((error) => {\n        console.log(error);\n    });*/\n  }, []);\n  const forecastByHour = forecast.filter((forecast, index) => index === 6 || index === 9 || index === 15 || index === 20);\n  console.log(forecastByHour);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"ALA\"\n  }, void 0, false);\n}\n_s(Forecast, \"Ydn6hUZqbmyQnL7JGFANHgW/va4=\");\n_c = Forecast;\nvar _c;\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"names":["useEffect","useState","getForecast","Forecast","latitude","longitude","selectedPointName","forecast","setForecast","body","forecastByHour","filter","index","console","log"],"sources":["/home/rafus/Documents/Surfs-Up-Front-end/src/pagesComponents/homePageComponents/Forecast.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { getForecast } from \"../../services/API.js\";\n\nexport default function Forecast({ latitude, longitude, selectedPointName }) {\n\n    const [forecast, setForecast] = useState([]);\n\n    useEffect(() => {\n        const body = {\n            longitude: longitude,\n            latitude: latitude\n        }\n        /*getForecast(body).then((response) => {\n            setForecast(response.data.hours);\n        }).catch((error) => {\n            console.log(error);\n        });*/\n    }, []);\n\n    const forecastByHour = forecast.filter((forecast, index) => index === 6 || index === 9 || index === 15 || index === 20);\n    console.log(forecastByHour);\n    \n    return (\n        <>ALA</>\n    )\n\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,uBAAuB;AAAC;AAAA;AAEpD,eAAe,SAASC,QAAQ,OAA6C;EAAA;EAAA,IAA5C;IAAEC,QAAQ;IAAEC,SAAS;IAAEC;EAAkB,CAAC;EAEvE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACZ,MAAMS,IAAI,GAAG;MACTJ,SAAS,EAAEA,SAAS;MACpBD,QAAQ,EAAEA;IACd,CAAC;IACD;AACR;AACA;AACA;AACA;EACI,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,cAAc,GAAGH,QAAQ,CAACI,MAAM,CAAC,CAACJ,QAAQ,EAAEK,KAAK,KAAKA,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,EAAE,IAAIA,KAAK,KAAK,EAAE,CAAC;EACvHC,OAAO,CAACC,GAAG,CAACJ,cAAc,CAAC;EAE3B,oBACI;IAAA,UAAE;EAAG,iBAAG;AAGhB;AAAC,GAvBuBP,QAAQ;AAAA,KAARA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}